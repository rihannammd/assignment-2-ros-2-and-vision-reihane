#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from aisd_msgs.srv import Speak


class SpeakClient(Node):
    def __init__(self):
        super().__init__('speak_client')

        # Create a client for the Speak service
        self.speak_service_client = self.create_client(Speak, 'speak_service')
        self.wait_for_service()

        # Create a subscription to the 'words' topic
        self.subscription = self.create_subscription(
            String,
            'words',
            self.on_message_received,
            10
        )
        self.get_logger().info("Speak Client is ready and listening to the 'words' topic.")

    def wait_for_service(self):
        """Wait until the service is available."""
        while not self.speak_service_client.wait_for_service(timeout_sec=1.0):
            self.get_logger().warning('Waiting for the Speak service to become available...')

    def on_message_received(self, msg):
        """
        Callback executed when a message is received on the 'words' topic.
        """
        received_text = msg.data
        self.get_logger().info(f"Received message: '{received_text}'")

        # Send the received message to the Speak service
        response = self.send_speak_request(received_text)
        if response:
            self.get_logger().info(f"Response from Speak service: '{response.response}'")

    def send_speak_request(self, text):
        """
        Send a request to the Speak service with the given text.
        """
        request = Speak.Request()
        request.words = text

        future = self.speak_service_client.call_async(request)
        self.get_logger().info("Sending request to Speak service...")
        rclpy.spin_until_future_complete(self, future)

        if future.result():
            return future.result()
        else:
            self.get_logger().error("Failed to receive a response from the Speak service.")
            return None


def main(args=None):
    rclpy.init(args=args)
    node = SpeakClient()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info("Speak Client shutting down...")
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == "__main__":
    main()
