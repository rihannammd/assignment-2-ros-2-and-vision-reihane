#!/usr/bin/env python3

import wave
import struct
import os
import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from aisd_msgs.srv import Speak
import whisper


class AudioToTextNode(Node):
    def __init__(self):
        super().__init__('audio_to_text_node')
        self.declare_parameter('whisper_model', 'base')
        self.model_name = self.get_parameter('whisper_model').get_parameter_value().string_value

        # Load Whisper model
        self.get_logger().info(f"Loading Whisper model: {self.model_name}")
        self.model = whisper.load_model(self.model_name)

        # Publisher and Subscriber
        self.publisher_ = self.create_publisher(String, 'transcribed_text', 10)
        self.subscription = self.create_subscription(
            String,
            'audio_file_path',
            self.audio_callback,
            10
        )
        self.get_logger().info("Audio to Text Node initialized and ready.")

    def audio_callback(self, msg):
        """Callback function triggered when a message is received on 'audio_file_path' topic."""
        audio_file_path = msg.data
        self.get_logger().info(f"Received audio file path: {audio_file_path}")

        # Validate file path
        if not os.path.exists(audio_file_path):
            self.get_logger().error(f"Audio file not found: {audio_file_path}")
            return

        # Process the audio file
        try:
            transcription = self.process_audio_file(audio_file_path)
            if transcription:
                # Publish the transcribed text
                transcribed_msg = String()
                transcribed_msg.data = transcription
                self.publisher_.publish(transcribed_msg)
                self.get_logger().info(f"Transcription published: {transcription}")
        except Exception as e:
            self.get_logger().error(f"Error processing audio file: {e}")

    def process_audio_file(self, file_path):
        """Process an audio file and return its transcription."""
        try:
            # Open and read the audio file
            with wave.open(file_path, 'rb') as audio_file:
                self.get_logger().info(f"Processing audio file: {file_path}")
                audio_frames = audio_file.readframes(audio_file.getnframes())
                audio_sample_rate = audio_file.getframerate()
                audio_data = [
                    struct.unpack("<h", audio_frames[i:i+2])[0]
                    for i in range(0, len(audio_frames), 2)
                ]

            # Transcribe the audio using Whisper
            transcription_result = self.model.transcribe(
                audio_data,
                fp16=False,
                language='English',
                sample_rate=audio_sample_rate
            )
            transcription = transcription_result.get('text', '').strip()
            self.get_logger().info(f"Transcription result: {transcription}")
            return transcription
        except Exception as e:
            self.get_logger().error(f"Failed to process or transcribe audio: {e}")
            return None


def main(args=None):
    rclpy.init(args=args)
    node = AudioToTextNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info("Shutting down Audio to Text Node.")
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()
