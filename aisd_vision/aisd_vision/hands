import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2
import mediapipe as mp
from aisd_msgs.msg import Hand


class HandPoseDetector(Node):
    """
    A ROS2 node for detecting hand poses using MediaPipe and publishing
    hand landmark positions (index finger and pinky finger).
    """

    def __init__(self):
        super().__init__('hand_pose_detector')

        # Initialize subscribers and publishers
        self.image_subscription = self.create_subscription(
            Image,
            'video_frames',
            self.process_frame_callback,
            10
        )
        self.hand_publisher = self.create_publisher(Hand, 'cmd_hands', 10)

        # Initialize OpenCV bridge
        self.bridge = CvBridge()

        # Constants for landmark indices
        self.PINKY_FINGER_TIP = 20
        self.INDEX_FINGER_TIP = 8

        self.get_logger().info('Hand Pose Detector node initialized and ready.')

    def process_frame_callback(self, msg: Image):
        """
        Callback function to process incoming image frames and publish hand landmarks.
        """
        try:
            # Convert ROS Image message to OpenCV format
            frame = self.bridge.imgmsg_to_cv2(msg)
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # Process the frame for hand landmarks using MediaPipe
            with mp.solutions.hands.Hands(
                model_complexity=0,
                min_detection_confidence=0.5,
                min_tracking_confidence=0.5
            ) as hands_detector:

                frame.flags.writeable = False
                results = hands_detector.process(frame)

                # Check for detected hands
                if results.multi_hand_landmarks:
                    self.publish_hand_landmarks(results.multi_hand_landmarks[0])
                else:
                    self.get_logger().debug('No hands detected in the frame.')

        except Exception as e:
            self.get_logger().error(f"Error processing frame: {e}")

    def publish_hand_landmarks(self, hand_landmarks):
        """
        Publishes the coordinates of specific hand landmarks (index finger and pinky finger).
        """
        try:
            hand_msg = Hand()
            hand_msg.xpinky = hand_landmarks.landmark[self.PINKY_FINGER_TIP].x
            hand_msg.xindex = hand_landmarks.landmark[self.INDEX_FINGER_TIP].x

            if self.hand_publisher.get_subscription_count() > 0:
                self.hand_publisher.publish(hand_msg)
                self.get_logger().info(
                    f"Published hand landmarks - Index: {hand_msg.xindex}, Pinky: {hand_msg.xpinky}"
                )
            else:
                self.get_logger().warn('No subscribers for hand landmarks topic.')
        except Exception as e:
            self.get_logger().error(f"Error publishing hand landmarks: {e}")


def main(args=None):
    rclpy.init(args=args)

    # Initialize the Hand Pose Detector node
    hand_pose_detector = HandPoseDetector()

    try:
        rclpy.spin(hand_pose_detector)
    except KeyboardInterrupt:
        hand_pose_detector.get_logger().info('Node interrupted, shutting down.')
    finally:
        hand_pose_detector.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()
